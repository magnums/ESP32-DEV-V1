#include <WiFi.h>
#include "time.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WebServer.h>
#include <Preferences.h>

// ====================== OLED config ======================
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
#define OLED_ADDR     0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ====================== WiFi config ======================
const char* ssid     = "xxxxxxxxxx";
const char* password = "xxxxxxxxxx";

// ====================== NTP + Timezone ======================
const char* ntp1 = "pool.ntp.org";
const char* ntp2 = "time.nist.gov";
const char* timeZone = "GMT-7";  // GMT-7 = UTC+7

// ====================== Web Server ======================
WebServer server(80);
const char* loginUser = "admin";
const char* loginPass = "1234";

// ====================== Preferences ======================
Preferences prefs;

// ====================== Relay config ======================
#define RELAY_PIN 5
bool relayState = false;

// ====================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ======================
void handleRoot() {
  if (!server.authenticate(loginUser, loginPass)) {
    return server.requestAuthentication();
  }

  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Relay Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #111;
      color: white;
      font-family: Arial, sans-serif;
      margin: 0;
      flex-direction: column;
    }

    h2 {
      margin-bottom: 20px;
    }

    .btn {
      display: inline-block;
      padding: 16px 32px;
      margin: 10px;
      font-size: 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      text-decoration: none;
      color: white;
      transition: background 0.3s;
    }

    .btn-on {
      background-color: #28a745;
    }

    .btn-on:hover {
      background-color: #218838;
    }

    .btn-off {
      background-color: #dc3545;
    }

    .btn-off:hover {
      background-color: #c82333;
    }

    .status {
      font-size: 18px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <h2>Relay Control</h2>
  <div class="status">Relay is now: <b>%STATE%</b></div>
  <div>
    <a href="/on" class="btn btn-on">Turn ON</a>
    <a href="/off" class="btn btn-off">Turn OFF</a>
  </div>
</body>
</html>
)rawliteral";

  html.replace("%STATE%", relayState ? "ON" : "OFF");
  server.send(200, "text/html", html);
}


void handleOn() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();
  relayState = true;
  digitalWrite(RELAY_PIN, HIGH);
  prefs.begin("relay", false);
  prefs.putBool("state", true);
  prefs.end();
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleOff() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();
  relayState = false;
  digitalWrite(RELAY_PIN, LOW);
  prefs.begin("relay", false);
  prefs.putBool("state", false);
  prefs.end();
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

// ====================== SETUP ======================
void setup() {
  Serial.begin(115200);
  Wire.begin(); // SDA, SCL for ESP32-C3 Pro Mini

  pinMode(RELAY_PIN, OUTPUT);

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Preferences
  prefs.begin("relay", true);
  relayState = prefs.getBool("state", false);
  prefs.end();
  digitalWrite(RELAY_PIN, relayState ? HIGH : LOW);

  // OLED Init
  if (!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) {
    Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏≠ OLED");
    while (1);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Connecting WiFi...");
  display.display();

  // Connect WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi connected");

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi connected");
  display.setCursor(0, 10);
  display.print("IP: ");
  display.println(WiFi.localIP());
  display.display();
  delay(1000);

  // NTP Time
  configTzTime(timeZone, ntp1, ntp2);
  struct tm timeinfo;
  while (!getLocalTime(&timeinfo)) {
    Serial.println("Waiting for time sync...");
    delay(1000);
  }
  Serial.println("‚úÖ Time sync OK");

  // Web Server setup
  server.on("/", handleRoot);
  server.on("/on", handleOn);
  server.on("/off", handleOff);
  server.begin();
  Serial.println("üåê Web server started");
}

// ====================== LOOP ======================
// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ô‡∏≠‡∏Å setup/loop)
int displayMode = 0;  // 0 = Time, 1 = IP, 2 = Relay Status
unsigned long lastSwitchTitle = 0;


void loop() {
  server.handleClient();

  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("‚ö†Ô∏è Failed to get time");
    return;
  }

// ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‚Üí ‡∏™‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏à‡∏≠ (‡∏ß‡∏ô 0‚Üí1‚Üí2)
if (millis() - lastSwitchTitle >= 5000) {
  displayMode = (displayMode + 1) % 3;
  lastSwitchTitle = millis();
}

  char timeStr[16];
  char dateStr[16];

  strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
  strftime(dateStr, sizeof(dateStr), "%d/%m/%Y", &timeinfo);

  display.clearDisplay();

  // ========== ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ö‡∏ô‡∏™‡∏∏‡∏î ==========
  display.setTextSize(1);
  String title = "";
if (displayMode == 0) {
  title = "IP: " + WiFi.localIP().toString();
} else if (displayMode == 1) {
  title = "Relay Status: " + String(relayState ? "ON" : "OFF");
} else {
  title = "Date & Time: Thailand";
}


  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(title, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 0);
  display.println(title);

  // ========== ‡πÄ‡∏ß‡∏•‡∏≤ ==========
  display.setTextSize(2);
  String timeStrS = String(timeStr);
  display.getTextBounds(timeStrS, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 20);
  display.println(timeStrS);

  // ========== ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ==========
  String dateStrS = String(dateStr);
  display.getTextBounds(dateStrS, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 44);
  display.println(dateStrS);

  display.display();

  delay(1000); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
}

