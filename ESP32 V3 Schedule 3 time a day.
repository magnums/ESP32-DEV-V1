#include <WiFi.h>
#include <WiFiManager.h>
#include "time.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WebServer.h>
#include <Preferences.h>

// ========== OLED ==========
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
#define OLED_ADDR     0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long lastRelayCheck = 0;


// ========== Web Server ==========
WebServer server(80);
const char* loginUser = "admin";
const char* loginPass = "1234";

// ========== Preferences ==========
Preferences prefs;

// ========== Relay ==========
#define RELAY_PIN 5
bool relayState = false;

// ========== Time ==========
const char* ntp1 = "pool.ntp.org";
const char* ntp2 = "time.nist.gov";
const char* timeZone = "GMT-7"; // UTC+7
struct tm timeinfo;

// ========== Schedule ==========
struct Schedule {
  int onHour, onMinute;
  int offHour, offMinute;
};
Schedule schedules[3]; // 3 ‡∏£‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤

// ========== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ==========
int displayMode = 0;
unsigned long lastSwitchTitle = 0;

// ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á HTML ==========
void handleRoot() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();

  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Relay Control</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body { font-family: Arial; background-color: #111; color: #fff; text-align: center; padding-top: 30px; margin: 0; }
    .menu { background-color: #222; padding: 10px; }
    .menu a {
      color: #fff; text-decoration: none; margin: 0 15px; font-weight: bold;
    }
    .btn {
      padding: 15px 30px; font-size: 18px; margin: 10px;
      border: none; border-radius: 8px; cursor: pointer;
      text-decoration: none;
    }
    .btn-on { background: #28a745; color: white; }
    .btn-off { background: #dc3545; color: white; }
    .btn-action-reboot { background: #ffc107; color: black; }
    .btn-action-resetwifi { background: #007bff; color: white; }
    .btn:hover { opacity: 0.85; }
  </style>
  <script>
    function confirmAction(action) {
      if (action === 'reboot') return confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Reboot ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
      if (action === 'resetwifi') return confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á WiFi ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?");
      return false;
    }
  </script>
</head>
<body>
  <div class="menu">
    <a href="/">üìü ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay</a>
    <a href="/schedule">üïí ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î</a>
  </div>

  <h2>Relay Control</h2>
  <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå: <b>%STATE%</b></p>
  <div style="margin-bottom: 30px;">
  <a href='/on' class='btn btn-on'>‡πÄ‡∏õ‡∏¥‡∏î</a>
  <a href='/off' class='btn btn-off'>‡∏õ‡∏¥‡∏î</a>
</div>
<br>
<hr style="border: none; height: 3px; background-color: white; width: 90%; margin: 30px auto;">
<br>
<div>
  <a href='/resetwifi' class='btn btn-action-resetwifi' onclick="return confirmAction('resetwifi')">‚ùå Reset WiFi</a>
  <a href='/reboot' class='btn btn-action-reboot' onclick="return confirmAction('reboot')">üîÅ Reboot</a>
</div>

</body>
</html>
)rawliteral";

  html.replace("%STATE%", relayState ? "ON" : "OFF");
  server.send(200, "text/html", html);
}


void handleOn() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();
  relayState = true;
  digitalWrite(RELAY_PIN, HIGH);
  prefs.begin("relay", false);
  prefs.putBool("state", true);
  prefs.end();
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleOff() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();
  relayState = false;
  digitalWrite(RELAY_PIN, LOW);
  prefs.begin("relay", false);
  prefs.putBool("state", false);
  prefs.end();
  server.sendHeader("Location", "/", true);
  server.send(302, "text/plain", "");
}

void handleReboot() {
  server.send(200, "text/html", "<meta http-equiv='refresh' content='2;url=/'><h2>Rebooting...</h2>");
  delay(1000);
  ESP.restart();
}

void handleResetWiFi() {
  WiFi.disconnect(true, true);
  server.send(200, "text/html", "<meta http-equiv='refresh' content='5;url=/'><h2>WiFi ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß<br>Rebooting...</h2>");
  delay(3000);
  ESP.restart();
}

// ========== ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ==========
void handleSchedulePage() {
  if (!server.authenticate(loginUser, loginPass)) return server.requestAuthentication();

  String html = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Relay</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #111;
      color: white;
      text-align: center;
      padding-top: 30px;
      margin: 0;
    }

    .menu {
      background-color: #222;
      padding: 10px;
    }

    .menu a {
      color: white;
      text-decoration: none;
      margin: 0 15px;
      font-weight: bold;
      font-size: 18px;
    }

    h2 {
      margin-bottom: 30px;
      font-size: 26px;
    }

    form {
      display: inline-block;
      text-align: left;
      background: #1a1a1a;
      padding: 20px 30px;
      border-radius: 10px;
    }

    label {
      display: inline-block;
      width: 80px;
      font-size: 18px;
      margin-bottom: 6px;
    }

    input[type="time"] {
      font-size: 18px;
      padding: 4px 8px;
      margin-bottom: 10px;
    }

    .round-title {
      margin-top: 15px;
      font-size: 20px;
      font-weight: bold;
      color: #ffcc00;
    }

    .submit-btn {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 18px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      background-color: #28a745;
      color: white;
    }

    .submit-btn:hover {
      background-color: #218838;
    }
  </style>
</head>
<body>
  <div class="menu">
    <a href="/">üìü ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Relay</a>
    <a href="/schedule">üïí ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î</a>
  </div>

  <h2>‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Relay</h2>
  <form method="POST" action="/set_schedule">
)rawliteral";

  for (int i = 0; i < 3; i++) {
    char onH[3], onM[3], offH[3], offM[3];
    sprintf(onH, "%02d", schedules[i].onHour);
    sprintf(onM, "%02d", schedules[i].onMinute);
    sprintf(offH, "%02d", schedules[i].offHour);
    sprintf(offM, "%02d", schedules[i].offMinute);

    html += "<div class='round-title'>‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà " + String(i + 1) + "</div>";
    html += "<label>‡πÄ‡∏õ‡∏¥‡∏î:</label> <input type='time' name='on" + String(i) + "' value='" + onH + ":" + onM + "'><br>";
    html += "<label>‡∏õ‡∏¥‡∏î:</label> <input type='time' name='off" + String(i) + "' value='" + offH + ":" + offM + "'><br><br>";
  }

  html += "<input class='submit-btn' type='submit' value='üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'>";
  html += "</form></body></html>";

  server.send(200, "text/html", html);
}



void handleSetSchedule() {
  for (int i = 0; i < 3; i++) {
    String onStr = server.arg("on" + String(i));
    String offStr = server.arg("off" + String(i));
    schedules[i].onHour = onStr.substring(0, 2).toInt();
    schedules[i].onMinute = onStr.substring(3, 5).toInt();
    schedules[i].offHour = offStr.substring(0, 2).toInt();
    schedules[i].offMinute = offStr.substring(3, 5).toInt();
  }

  prefs.begin("schedule", false);
  prefs.putBytes("data", &schedules, sizeof(schedules));
  prefs.end();

  // ‚úÖ ‡πÉ‡∏ä‡πâ HTML ‡∏û‡∏£‡πâ‡∏≠‡∏° meta charset
  server.send(200, "text/html", R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <script>
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
        window.location.href = "/schedule";
      </script>
    </head>
    <body></body>
    </html>
  )rawliteral");
}



// ========== ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå ==========
void checkSchedule() {
  if (!getLocalTime(&timeinfo)) return;

  if (millis() - lastRelayCheck < 1000) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥
  lastRelayCheck = millis();

  for (int i = 0; i < 3; i++) {
    if (timeinfo.tm_hour == schedules[i].onHour &&
        timeinfo.tm_min == schedules[i].onMinute &&
        timeinfo.tm_sec == 0) {
      digitalWrite(RELAY_PIN, HIGH);
      relayState = true;
      Serial.printf("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Relay ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n", i + 1);
    }

    if (timeinfo.tm_hour == schedules[i].offHour &&
        timeinfo.tm_min == schedules[i].offMinute &&
        timeinfo.tm_sec == 0) {
      digitalWrite(RELAY_PIN, LOW);
      relayState = false;
      Serial.printf("‚õîÔ∏è ‡∏õ‡∏¥‡∏î Relay ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d\n", i + 1);
    }
  }
}


// ========== SETUP ==========
void setup() {
  Serial.begin(115200);

  // üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤ SDA/SCL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ (DevKit ‡πÉ‡∏ä‡πâ 21, 22 / ESP32-C3 ‡πÉ‡∏ä‡πâ 8, 9 ‡∏´‡∏£‡∏∑‡∏≠ 6,7)
  Wire.begin(21, 22); // <--- ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ñ‡∏∏‡∏ì

  pinMode(RELAY_PIN, OUTPUT);

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Preferences
  prefs.begin("relay", true);
  relayState = prefs.getBool("state", false);
  prefs.end();
  digitalWrite(RELAY_PIN, relayState ? HIGH : LOW);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤
  prefs.begin("schedule", true);
  prefs.getBytes("data", &schedules, sizeof(schedules));
  prefs.end();

  // üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô OLED ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î/‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  if (!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) {
    Serial.println("‚ùå OLED ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠");
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);                        // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
  display.setTextColor(SSD1306_WHITE);           // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
  display.setCursor(0, 0);
  display.println("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° WiFi...");
  display.display();

  // =========== WiFiManager ===========
  WiFiManager wm;

  // Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î AP
  wm.setAPCallback([](WiFiManager* wm) {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("AP Mode");
    display.println("SSID: ESP32-SETUP");
    display.println("Waiting...");
    display.display();
  });

  if (!wm.autoConnect("ESP32-SETUP")) {
    Serial.println("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó...");
    ESP.restart();
  }

  // ‡πÅ‡∏™‡∏î‡∏á IP ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("WiFi connected");
  display.setCursor(0, 10);
  display.println(WiFi.localIP());
  display.display();
  delay(1000);

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å NTP
  configTzTime(timeZone, ntp1, ntp2);
  while (!getLocalTime(&timeinfo)) {
    Serial.println("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏ß‡∏•‡∏≤...");
    delay(500);
  }

  // Web Server
  server.on("/", handleRoot);
  server.on("/on", handleOn);
  server.on("/off", handleOff);
  server.on("/reboot", handleReboot);
  server.on("/resetwifi", handleResetWiFi);
  server.on("/schedule", handleSchedulePage);
  server.on("/set_schedule", handleSetSchedule);
  server.begin();

  Serial.println("‚úÖ Web server started");
}


// ========== LOOP ==========
void loop() {
  server.handleClient();
  checkSchedule();

  if (!getLocalTime(&timeinfo)) return;

  if (millis() - lastSwitchTitle >= 5000) {
    displayMode = (displayMode + 1) % 3;
    lastSwitchTitle = millis();
  }

  char timeStr[16], dateStr[16];
  strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
  strftime(dateStr, sizeof(dateStr), "%d/%m/%Y", &timeinfo);

  display.clearDisplay();
  display.setTextSize(1);
  String title = displayMode == 0 ? "Date & Time: Thailand" :
                 displayMode == 1 ? "IP: " + WiFi.localIP().toString() :
                 "Relay Status: " + String(relayState ? "ON" : "OFF");

  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(title, 0, 0, &x1, &y1, &w, &h);
  display.setCursor((SCREEN_WIDTH - w) / 2, 0);
  display.println(title);

  display.setTextSize(2);
  display.setCursor(20, 20);
  display.println(timeStr);
  display.setTextSize(1);
  display.setCursor((SCREEN_WIDTH - strlen(dateStr) * 6) / 2, 44);
  display.println(dateStr);

  display.display();
  delay(1000);
}
